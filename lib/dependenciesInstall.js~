module.exports = function(context) {
    // var Q = context.requireCordovaModule('q');
    // var npm = context.requireCordovaModule('npm');
    // var fs = require('fs');
    // var path = require('path');
    // var installLocation = '../';

    // debugger;
    // console.log('depInstall');
    // var packageJSONLocation = path.join(installLocation, 'package.json');
    // var dependencies = JSON.parse(fs.readFileSync(packageJSONLocation, 'utf-8')).dependencies;
    
    // var depNames = [];
    // for(var dep in dependencies) {
    // 	if (dependencies.hasOwnProperty(dep)) {
    //         depNames.push(dep);
    // 	}
    // }

    // var packagesToInstall = depNames.map(function(dep){
    // 	return dep + '@' + dependencies[dep];
    // });

    // console.log('dependenciesInstall');
    // var fs = require('fs');
    // //var fd = fs.openSync('./test.txt', 'w');
    // fs.closeSync(fs.openSync('/home/omefire/ddd.txt', 'w'));

    // return Q.promise(function(resolve, reject, notify) {
    //     npm.load({
    //         loaded: false
    //     }, function(err) {
    //         if (err) {
    //             //return Q.reject('npm load failed.');
    // 		reject('npm load failed.');
    //             //throw new Error("npm load failed."); // Test // ToDO: return Q promise ?
    //         }
    //         npm.commands.install(installLocation, ["shelljs@0.3.0"]/*packagesToInstall*/, function(er, data) {
    //             // log the error or data
    //             if (err) { // Test // ToDO: return Q promise
    // 		    reject('dependencies install failed.');
    //                 //throw new Error("dependencies install failed."); // Tesst // ToDO: return Q promise -> deferred.fail();
    //                 //return Q.reject('dependencies install failed.');
    //             }
    //             resolve();
    //         });
    //     });
    // });

    var Q = context.requireCordovaModule('q');

    return Q.promise(function(resolve, reject, notify) {
	try {
	    require('browser-sync');
	    resolve();
	} catch (e) {
	    var npm = context.requireCordovaModule('npm');
	    return Q.ninvoke(npm, 'load').then(function() {
		return Q.ninvoke(npm.commands, 'install', ['browser-sync']);
	    }).then(function() {
		resolve();
	    });
	}
    });
};
